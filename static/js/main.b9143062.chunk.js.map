{"version":3,"sources":["serviceWorker.js","components/Error/index.js","components/Error/Error.jsx","components/Result/index.js","components/Result/Result.jsx","components/Word/Word.styles.js","components/Word/index.js","components/Word/Word.jsx","styles/global.js","services/words.js","components/App/index.js","components/App/App.jsx","styles/theme.js","index.js"],"names":["Boolean","window","location","hostname","match","Error","props","error","type","icon","faMicrophone","faChrome","Result","result","faCheckCircle","faTimesCircle","answer","WordWrapper","styled","div","Word","word","Wrapper","getRandomWord","words","Math","floor","random","length","App","useState","setWord","setResult","setAnswer","setError","useEffect","SpeechRecognition","webkitSpeechRecognition","undefined","navigator","mediaDevices","getUserMedia","audio","catch","err","listen","recognition","lang","interimResults","maxAlternatives","finalTranscript","onresult","event","i","resultIndex","len","results","transcript","isFinal","String","toLowerCase","stop","start","theme","colors","primary","secondary","fontSizes","small","medium","large","GlobalStyle","createGlobalStyle","Theme","children","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9143062.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Error from './Error';\n\nexport default Error;\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMicrophone } from '@fortawesome/free-solid-svg-icons'\nimport { faChrome } from '@fortawesome/free-brands-svg-icons'\n\nexport default (props) => {\n  switch (props.error.type) {\n    case 'permission':\n      return (\n        <div>\n          <FontAwesomeIcon icon={faMicrophone}/>\n          <h2>This application needs the microphone permission.</h2>\n        </div>\n      )\n    case 'browser':\n      return (\n        <div>\n          <FontAwesomeIcon icon={faChrome}/>\n          <h2>Seems like your browser isn't compatible with this technology, try with Chrome web browser.</h2>\n        </div>\n      )\n  }\n}\n","import Result from './Result';\n\nexport default Result;\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons'\n\nexport default (props) => (\n  <div>\n    {props.result === true \n    ? <>\n      <FontAwesomeIcon icon={faCheckCircle}/>\n      <h2>Very good</h2>\n      </>\n    : <>\n      <FontAwesomeIcon icon={faTimesCircle}/>\n      <h2>Oh no! You fail</h2>\n      </>\n    }\n    <p>You said: {props.answer}</p>\n  </div>\n)","import styled from 'styled-components'\n\nexport const WordWrapper = styled.div`\n    p {\n        font-size: 8em;\n        margin: 0;\n    }\n`","import Word from './Word';\n\nexport default Word;\n","import React from 'react'\nimport { WordWrapper } from './Word.styles';\n\nexport default (props) => (\n  <WordWrapper>\n    <h2>Say that word on the microphone:</h2>\n    <p>{props.word}</p>\n  </WordWrapper>\n)\n","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    background-color: #ffea00;\n\n    svg {\n        font-size: 8em;\n    }\n`","import words from '../data/words.json'\n\nconst getRandomWord = () => {\n    return words.words[Math.floor(Math.random() * words.words.length)]\n}\n\nexport default getRandomWord","import App from './App';\n\nexport default App;\n","import React, { useState, useEffect } from 'react'\nimport Error from '../Error'\nimport Result from '../Result'\nimport Word from '../Word'\nimport { Wrapper } from '../../styles/global'\nimport words from '../../services/words'\n\nexport default (props) => {\n  const [word, setWord] = useState('hello')\n  const [result, setResult] = useState()\n  const [answer, setAnswer] = useState('')\n  const [error, setError] = useState({ error: false })\n\n  useEffect(() => {\n    setWord(words)\n  }, [])\n\n  useEffect(() => {\n    window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n\n    if (window.SpeechRecognition !== undefined) {\n      navigator.mediaDevices.getUserMedia({ audio: true })\n        .catch(function (err) {\n          setError({ error: true, type: 'permission' })\n        })\n      listen()\n    } else {\n      setError({ error: true, type: 'browser' })\n    }\n  }, [word])\n\n  const listen = () => {\n    const recognition = new window.SpeechRecognition();\n\n    recognition.lang = 'en-US';\n    recognition.interimResults = false;\n    recognition.maxAlternatives = 10;\n\n    let finalTranscript = '';\n    recognition.onresult = (event) => {\n      for (let i = event.resultIndex, len = event.results.length; i < len; i++) {\n        let transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript;\n        }\n      }\n\n      setAnswer(finalTranscript)\n\n      if (String(word).toLowerCase() === String(finalTranscript).toLowerCase()) {\n        setResult(true)\n        recognition.stop()\n      } else {\n        setResult(false)\n        recognition.stop()\n      }\n    }\n    recognition.start()\n  }\n\n  if (error.error) {\n    return (\n      <Wrapper>\n        <Error error={error} />\n      </Wrapper>\n    )\n  }\n\n  if (result !== undefined) {\n    return (\n      <Wrapper>\n        <Result result={result} answer={answer}/>\n      </Wrapper>\n    )\n  }\n\n  return (\n    <Wrapper>\n      <Word word={word} />\n      <p>{answer}</p>\n    </Wrapper>\n  )\n\n}\n","import {\n    ThemeProvider,\n    createGlobalStyle\n} from \"styled-components\"\nimport React from 'react'\n\nconst theme = {\n    colors: {\n        primary: \"#9b003dff\",\n        secondary: \"#ffcd00ff\",\n    },\n    fontSizes: {\n        small: \"1em\",\n        medium: \"2em\",\n        large: \"3em\"\n    }\n}\n\nconst GlobalStyle = createGlobalStyle`\n    html, body {\n        height: 100%;\n    }\n    \n    body {\n        margin: 0;\n    }\n\n    a:hover {\n        cursor: pointer; \n    }\n\n    #root {\n        height: 100%;\n    }\n`\n\nconst Theme = ({ children }) => (\n    <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        {children}\n    </ThemeProvider>\n)\n\nexport default Theme","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App'\nimport Theme from './styles/theme'\n\nReactDOM.render(<Theme><App /></Theme>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}